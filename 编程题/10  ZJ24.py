'''
ZJ24 机器人跳跃问题 

https://www.nowcoder.com/practice/7037a3d57bbd4336856b8e16a9cafd71?tpId=137&tags=&title=&difficulty=0&judgeStatus=0&rp=0


描述
机器人正在玩一个古老的基于DOS的游戏。游戏中有N+1座建筑——从0到N编号，从左到右排列。编号为0的建筑高度为0个单位，编号为i的建筑的高度为H(i)个单位。 

起初， 机器人在编号为0的建筑处。每一步，它跳到下一个（右边）建筑。假设机器人在第k个建筑，且它现在的能量值是E, 下一步它将跳到第个k+1建筑。它将会得到或者失去正比于与H(k+1)与E之差的能量。如果 H(k+1) > E 那么机器人就失去 H(k+1) - E 的能量值，否则它将得到 E - H(k+1) 的能量值。

游戏目标是到达第个N建筑，在这个过程中，能量值不能为负数个单位。现在的问题是机器人以多少能量值开始游戏，才可以保证成功完成游戏？
输入描述：
第一行输入，表示一共有 N 组数据.

第二个是 N 个空格分隔的整数，H1, H2, H3, ..., Hn 代表建筑物的高度
输出描述：
输出一个单独的数表示完成游戏所需的最少单位的初始能量
示例1
输入：

5
3 4 3 2 4

输出：

4

示例2
输入：

3
4 4 4

输出：

4

示例3
输入：

3
1 6 4

输出：

3

备注：

数据约束：
1 <= N <= 10^5
1 <= H(i) <= 10^5
'''
import math

class Solution:
    def jump(n, h):
        # need:到达终点的所需要最小的能量
        need=0
        # 到达终点能量为0时，开始所需能量最小。
        # 从终点开始倒推理，推理出前一步所需的能量。一直递推到起点
        for i in range(0, n):
            need = math.ceil((h[-(i+1)] + need)/2)
        return need

if __name__ == '__main__':
    n = int(input())
    h = list(map(int, input().strip().split()))
    s = Solution.jump(n, h)
    print(s)
        